version: '3.9'

volumes:
  pg-db:
  rabbitmq:
  influx_conf:
  influx_data:

networks:
  internal:

services:
  pgdb:
    container_name: system_pgdb
    image: postgres:${POSTGRES_VERSION}
    volumes:
      - pg-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    restart: always
    networks:
      - internal
    healthcheck:
      test: 'PGPASSWORD=${POSTGRES_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
  influx:
    image: influxdb
    container_name: influx
    volumes:
      - influx_conf:/etc/influxdb2
      - influx_data:/var/lib/influxdb2
    networks:
      - internal
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${NUXT_INFLUX_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${NUXT_INFLUX_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_ADMIN}
    restart: always
    healthcheck:
      test: curl --fail http://localhost:8086 || exit 1
  queue:
    image: rabbitmq:3-management-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq/
    networks:
      - internal
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  worker-demo:
    image: todo_system_worker_demo:${WEB_VERSION}
    build:
      dockerfile: queue-worker.Dockerfile
      context: .
    environment:
      - NUXT_RABBIT_URL=${NUXT_RABBIT_URL}
    networks:
      - internal
    restart: always
